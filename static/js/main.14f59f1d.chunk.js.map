{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PokemonRow","pokemon","onSelect","name","english","type","join","Button","variant","color","onClick","PokemonInfo","base","Object","keys","map","key","prototypes","PropTypes","shape","string","isRequired","HP","number","Attack","Defense","Speed","Title","styled","h1","TwoColunmLayout","div","Container","Input","input","App","React","useState","filter","filterSet","selectedItem","selectedItemSet","value","onChange","evt","target","width","toLowerCase","includes","slice","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yhjMAQA,IAAMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACjB,4BACA,4BAAKD,EAAQE,KAAKC,SAClB,4BAAKH,EAAQI,KAAKC,KAAK,OACvB,4BACE,kBAACC,EAAA,EAAD,CACCC,QAAQ,YACRC,MAAM,UACNC,QAAS,kBAAMR,EAASD,KAHzB,cAkBEU,EAAc,SAAC,GAAD,IAAGR,EAAH,EAAGA,KAAMS,EAAT,EAASA,KAAT,OACpB,6BACA,4BAAKT,EAAKC,SACV,+BAEIS,OAAOC,KAAKF,GAAMG,KAAI,SAAAC,GAAG,OACvB,wBAAIA,IAAKA,GACP,4BAAKA,GACL,4BAAKJ,EAAKI,WAQlBL,EAAYM,WAAa,CACvBd,KAAMe,IAAUC,MAAM,CACpBf,QAASc,IAAUE,OAAOC,aAE5BT,KAAMM,IAAUC,MAAM,CACpBG,GAAGJ,IAAUK,OAAOF,WACpBG,OAAQN,IAAUK,OAAOF,WACzBI,QAASP,IAAUK,OAAOF,WAC1B,aAAcH,IAAUK,OAAOF,WAC/B,sBAAuBH,IAAUK,OAAOF,WACxCK,MAAOR,IAAUK,OAAOF,cAI5B,IAAMM,EAAQC,IAAOC,GAAV,KAGLC,EAAkBF,IAAOG,IAAV,KAKdC,EAAYJ,IAAOG,IAAV,KAKRE,EAAQL,IAAOM,MAAV,KAoDEC,MA7Cd,WAAgB,IAAD,EACcC,IAAMC,SAAS,IAD7B,mBACPC,EADO,KACCC,EADD,OAE0BH,IAAMC,SAAS,MAFzC,mBAEPG,EAFO,KAEOC,EAFP,KAKZ,OACE,kBAACT,EAAD,KACE,kBAACL,EAAD,uBACA,kBAACG,EAAD,KACC,6BACC,kBAACG,EAAD,CACCS,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAASL,EAAUK,EAAIC,OAAOH,UAG3C,2BAAOI,MAAM,QACb,+BACE,4BACE,oCACA,sCAGJ,+BACG7C,EACAqC,QAAO,SAACrC,GAAD,OACNA,EAAQE,KAAKC,QACV2C,cACAC,SAASV,EAAOS,kBACpBE,MAAM,EAAG,IACTlC,KAAI,SAACd,GAAD,OACH,kBAAC,EAAD,CACEA,QAASA,EACTe,IAAKf,EAAQiD,GACbhD,SAAU,SAACD,GAAD,OAAawC,EAAgBxC,YAM9CuC,GAAgB,kBAAC,EAAkBA,MC5GtBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.14f59f1d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport styled from \"@emotion/styled\";\nimport { Button } from '@material-ui/core';\n\nimport './App.css';\nimport pokemon from \"./pokemon.json\";\n\nconst PokemonRow = ({ pokemon, onSelect }) => (\n  <tr>\n  <td>{pokemon.name.english}</td>\n  <td>{pokemon.type.join(\", \")}</td>\n  <td>\n    <Button \n     variant=\"contained\" \n     color=\"primary\"\n     onClick={() => onSelect(pokemon)}>Select!</Button> \n  </td>\n</tr>  \n);\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.shape({\n    name: PropTypes.shape({\n      english: PropTypes.string.isRequired,\n    }),\n    type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  }),\n  onSelect: PropTypes.func.isRequired,\n};\n\nconst PokemonInfo = ({ name, base }) => (\n<div>\n<h1>{name.english}</h1>\n<table>\n  {\n    Object.keys(base).map(key => (\n      <tr key={key}>\n        <td>{key}</td>\n        <td>{base[key]}</td>\n      </tr>\n    ))\n  }\n</table>\n</div>\n);  \n\nPokemonInfo.prototypes = {\n  name: PropTypes.shape({\n    english: PropTypes.string.isRequired,\n  }),\n  base: PropTypes.shape({\n    HP:PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    \"Sp. Attack\": PropTypes.number.isRequired,\n    \"Sp. Attack. Defense\": PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  }),\n}\n\nconst Title = styled.h1`\n  text-align: center;\n  `;\nconst TwoColunmLayout = styled.div`\n   display: grid;\n   grid-template-columns: 70% 30%;\n   grid-column-gap: 1rem;\n `;\n const Container = styled.div`\n   margin: auto;\n   width: 800 px;\n   paddingTop: 1rem;\n `;\n  const Input = styled.input`\n   width: 100%;\n   font-size: x-large;\n   padding: 0.2rem;\n `;\n\n\n function App() {\n  const [filter, filterSet] = React.useState(\"\");\n  const [selectedItem, selectedItemSet] = React.useState(null);\n\n\n    return ( \n      <Container> \n        <Title>Pokemon Search</Title>\n        <TwoColunmLayout>\n         <div>\n          <Input \n           value={filter} \n           onChange={(evt) => filterSet(evt.target.value)\n           }\n         />\n        <table width=\"100%\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n          </tr>\n        </thead>\n        <tbody>\n          {pokemon\n          .filter((pokemon) => \n            pokemon.name.english\n              .toLowerCase()\n              .includes(filter.toLowerCase()))\n          .slice(0, 20)\n          .map((pokemon) => (\n            <PokemonRow \n              pokemon={pokemon} \n              key={pokemon.id} \n              onSelect={(pokemon) => selectedItemSet(pokemon)} \n            />\n         ))}\n        </tbody>\n       </table>\n      </div>\n      {selectedItem && <PokemonInfo { ... selectedItem} />}      \n      </TwoColunmLayout>    \n    </Container>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}